"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"2-5","metadata":{"permalink":"/blog/2-5","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-10-26-remotion-2-5.md","source":"@site/blog/2021-10-26-remotion-2-5.md","title":"Remotion 2.5","description":"We are excited to announce a packed October release!","date":"2021-10-26T00:00:00.000Z","formattedDate":"October 26, 2021","tags":[],"readingTime":5.19,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Remotion Creator","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"nextItem":{"title":"Remotion 2.4","permalink":"/blog/2-4"}},"content":"We are excited to announce a packed October release!\\nWe did work in many areas and these improvements will surely boost your productivity!\\n\\n## In/Out markers\\n\\nYou may know this feature from programs like After Effects and Davinci Resolve already. It is as simple as it is useful: You can set an \u201cIn\u201d mark and an \u201cOut\u201d mark and the preview will only play whatever is in-between those timestamps. This makes it much easier to visually \u201cdebug\u201d a section of the video without having to watch the whole thing.\\n\\n<img src=\\"/img/inout.gif\\" />\\n\\n_Thanks to [Ankesh](https://github.com/remotion-dev/remotion/pull/631) for implementing this feature!_\\n\\n## `<Loop>` component\\n\\nPreviously, in order to repeat content, you had to manually create a bunch of sequences and calculate the timestamps yourself. We added a helper called [`<Loop />`](/docs/loop) which will repeat it\u2019s children either indefinitely or for a fixed number of times.\\nAnother benefit is that we display the loop component cleanly in our timeline.\\n\\n_Thanks to [Brian Pederson](https://github.com/remotion-dev/remotion/pull/638) for implementing this feature!_\\n\\n## Support for different playback rates\\n\\nYou can now change the playback rate in the editor and play a video in slow-motion, in fast-forward, and even in reverse! We support speeds between -4x and 4x. This makes debugging animations that don\u2019t look clean much easier.\\n\\nIt also works in the `<Player />`! See the new [`playbackRate`](/docs/player#playbackrate) prop and we also added a [`ratechange`](/docs/player#ratechange) event - just like the native HTML5 Video element.\\n\\n<img src=\\"/img/playbackrate.gif\\" />\\n\\n_Thanks to [Brian Pederson](https://github.com/remotion-dev/remotion/pull/656) for implementing this feature!_\\n\\n## Support for <kbd>J</kbd>, <kbd>K</kbd>, <kbd>L</kbd> keyboard shortcuts\\n\\nThese new shortcuts are super handy for navigating through a timeline. With the <kbd>L</kbd> key, you play the video as normal. Pressing the <kbd>L</kbd> key again will increase the speed to `2x`, and pressing <kbd>L</kbd> three times in total will play the video in `4x`.\\n\\nThe <kbd>J</kbd> key works the same, but plays the video backwards. Now you can reach any point in the video easily with just those two keys, even if the video is playing, without using the mouse.\\n\\nOnce you have reached the point where you want to pause the video and continue to code it, the <kbd>K</kbd> key will reset the playback rate to `1x` and pause the video.\\n\\n<img src=\\"/img/jkl.gif\\" />\\n\\nOnce you learn how to navigate using JKL keys, you\'ll never use your mouse for scrubbing again!\\n\\n_Thanks to [Brian Pederson](https://github.com/remotion-dev/remotion/pull/656) for implementing this feature!_\\n\\n:::tip\\nPress the <kbd>?</kbd> button to learn about all keyboard shortcuts!\\n:::\\n\\n## `durationInFrames={Infinity}` is now optional\\n\\nIf you wanted to delay an element but not cap it\u2019s duration, you had to explicitly specify `durationInFrames={Infinity}` . Not anymore! This is now the default and may be omitted.\\nIf you upgrade the `@remotion/eslint-config` package as well, we will even automatically remove the prop when you have autofix enabled!\\n\\n_Thanks to [Khalid Ansari](https://github.com/remotion-dev/remotion/pull/621) for implementing this feature!_\\n\\n## Fig autocomplete\\n\\nIn case you don\u2019t know [Fig](https://fig.io/), it is a free macOS application that provides autocomplete for the terminal. What sounds like a gimmick, actually works surprisingly well and I personally would miss it a lot if I didn\u2019t have it!\\nThe Remotion CLI that you can invoke using `npx remotion` now has full autocomplete support in Fig! You have to do nothing except install Fig.\\n\\n<img src=\\"/img/fig.gif\\" />\\n\\n_Thanks to [Matt\xe8o Gauthier](https://github.com/withfig/autocomplete/pull/633) for implementing this feature!_\\n\\n## Node.JS 17 support\\n\\nThis version came out recently and broke almost every Webpack project because legacy crypto functions were removed.\\n\\nWe added the necessary modifications to our default Webpack config, and [even contributed a pull request to Webpack](https://github.com/webpack/webpack/pull/14557) to fix the last remaining bug that would break Remotion with Node 17! If you are upgrading Node, definitely make sure get this new version of Remotion.\\n\\n## Monorepo migrated to `pnpm`\\n\\nContributors to Remotion would previously often struggle to correctly set up our monorepo. Indeed it was hard to correctly link all the packages and too easy to mess it up and run into error messages.\\n\\nThis is why we are happy to [have migrated to `pnpm`](https://github.com/remotion-dev/remotion/pull/627), which gets rid of the linking problems and also speeds up installation significantly. In your CI systems, we saw build times go down by 40%, which allows to iterate much more faster.\\n\\n_Thanks to [Sergio Moreno](https://github.com/remotion-dev/remotion/pull/627) for implementing this migration!_\\n\\n## \u201cEmpty\u201d template\\n\\n[A new template](https://github.com/remotion-dev/template-empty) has been added to `npm init video` / `yarn create video`: The blank template.\\nThis template contains only the bare minimum Remotion boilerplate and a completely empty canvas. It is especially useful for people already familiar with Remotion who would like to skip deleting the Hello World project every time.\\n\\n_Thanks to [Aneesh Relan](https://github.com/remotion-dev/remotion/pull/620) for creating this template!_\\n\\n## Render video to `out` folder\\n\\nPreviously by default, a video would be rendered to `out.mp4` in the root directory of your project. This also meant that in order to ignore it from Git, we had a complicated `.gitignore` by default that would ignore video files in the root but inverse-ignore other video files.\\nTime to simplify: From now on, we render a file into an `out` folder by default and simply ignore that folder.\\n\\n_Thanks to [ahmadrosid](https://github.com/remotion-dev/remotion/pull/618) for implementing this feature!_\\n\\n## Updates to `@remotion/three`\\n\\nA few interesting updates for users of `@remotion/three`:\\n\\n- The Three Canvas is now wrapped in `<Suspense>` and the render is delayed until the content has been loaded (unsuspended). This works better with the React Three.JS ecosystem and now components such as `drei`\u2019s `<Environment />` component will work out of the box.\\n- We now default to the `angle` OpenGL engine for Google Chrome, which we, through empirical testing, have found to have the best overall support for Three.JS content across platforms.\\n\\n## More updates\\n\\n- Added support for OTF fonts - _Thanks [William Candillon](https://github.com/remotion-dev/remotion/pull/637)_!\\n- Added possibility to customize `<Player>` error message - _Thanks [AudreyKj](https://github.com/remotion-dev/remotion/pull/654)_!\\n- Windows Node.JS 14 cleanup bug fixed - _Thanks [Raznov](https://github.com/remotion-dev/remotion/pull/634)_!\\n- Upgraded Docusaurus to the newest version, obtaining the newest features and layouts\\n\\n## Hacktoberfest Roundup\\n\\nWe opted into participating in Hacktoberfest, and put $100 bounties on [11 issues](https://github.com/remotion-dev/remotion/issues?q=+label%3A%22%F0%9F%A5%A8++hacktoberfest%22+) as an extra incentive!\\nEvery single of those issue has been picked up and solved! Every contributor did a great job, many greatly surpassing our expectations!\\n\\nThank you everybody who participated and contributed to this release!"},{"id":"2-4","metadata":{"permalink":"/blog/2-4","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-09-27-remotion-2-4.md","source":"@site/blog/2021-09-27-remotion-2-4.md","title":"Remotion 2.4","description":"In this release, we are revamping the Remotion Preview interface to make it easier on the eyes and add new features. While Remotion will always be about leveraging code instead of clicking buttons, we want to add complementary helpers to help you get your videos done faster!","date":"2021-09-27T00:00:00.000Z","formattedDate":"September 27, 2021","tags":[],"readingTime":3.64,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Remotion Creator","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 2.5","permalink":"/blog/2-5"},"nextItem":{"title":"Remotion 2.3","permalink":"/blog/2-3"}},"content":"In this release, we are revamping the Remotion Preview interface to make it easier on the eyes and add new features. While Remotion will always be about leveraging code instead of clicking buttons, we want to add complementary helpers to help you get your videos done faster!\\n\\n## New toolbar\\n\\nAll the actions that can be performed in the editor are now organized in a toolbar at the top, plus we added quick links to resources such as Documentation, Changelog, GitHub, Support options and our social media accounts ([follow us over there!](https://instagram.com/remotion.dev)).\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/toolbar.gif\\" style={{maxWidth: 500}} />\\n</p>\\n\\n## \\"New composition\\" helper\\n\\nYou can press <kbd>N</kbd> to bring up a modal that helps you generate code for creating a new `<Composition />` or `<Still />`. Drag the sliders to quickly adjust the dimensions and duration of the video. Lock or unlock the aspect ratio. Click the numbers to enter an exact value. Receive warnings on invalid configuration. Once you are happy with the code, you can click the copy button and paste it in your `src/Video.tsx` file.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/newcomp.png\\" style={{maxWidth: 650}} />\\n</p>\\n\\n## \\"Keyboard shortcuts\\" pane\\n\\nTo get an overview of all keyboard shortcuts, you can now press <kbd>?</kbd> to bring up a list of all shortcuts.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/keyboard-shortcuts.png\\" style={{maxWidth: 450}} />\\n</p>\\n\\n## Improved keyboard navigation\\n\\nFor those true hackers that don\'t use mouses, we optimized the whole new UI to be usable with just the keyboard. Use the <kbd>Tab</kbd> key to focus items, the arrow keys to navigate through menus. Press <kbd>Enter</kbd> or <kbd>Space</kbd> to click on items. Use <kbd>Escape</kbd> to quit modals and menus.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/keyboard-navigation.gif\\" style={{maxWidth: 600}} />\\n</p>\\n\\n## Built with 0 dependencies\\n\\nWe want to add new features to the Preview, but not bloat Remotion by adding tons of third-party packages that increase startup time and at some point will cause you to fight with your package manager. So we carefully crafted the editor with no dependencies except React and Remotion (which also only has `react` and `react-dom` as it\'s only dependencies).\\n\\n## Other improvements\\n\\n- **New `<Series />` component**: Introduced in 2.3.2, we added a new [`<Series />`](/docs/series) component that helps you layout many sequences in a row. See this post ([Instagram](https://www.instagram.com/p/CTMCMX1q-Lm/) | [Twitter](https://twitter.com/JNYBGR/status/1432225492116123651)) for additional infographic explanation!\\n\\n- **Better handling for browser autoplay policies**: If you use the [`<Player />`](/docs/player) and include audio in it, you might hit a browser limitation where audio cannot be played because of a browsers autoplay policy. Remotion can now avoid some of those scenarios by playing some silent audio when the user actively triggers a play on the Remotion Player. If you then later in the video want to play some audio, Remotion will route that audio to an `<audio />` tag that was already playing silent audio and was already freed from the playback restrictions of the browser. You can control the amount of silent audio tags that Remotion should place using the [`numberOfSharedAudioTags`](/docs/player#numberofsharedaudiotags) prop.\\n\\n- **Better handling of invalid dimensions**: It turns out that MP4s can only have even dimensions. So while a 1000x1000px MP4 is completely fine, a 999x999px MP4 is not possible according to the spec. Instead of erroring out when rendering, we now warn you early using a new ESLint rule, and also when you use the \\"New composition\\" dialog.\\n\\n- **Bug fixed when using `frameRange`:** A one-off error would cause the wrong frames being rendered when using the `frameRange` option. If you specified a frame range of `0-20`, the frames `-1` until `19` would be rendered. This is now rectified, if you were reliant on this option, please make sure your video renders as intended after the update!\\n\\n- **Component mounts directly at desired frame**:\\n  During rendering, previously the browser would always mount the React component at frame `0`, and then update the component with the initial frame that should be rendered. This is now changed, so if you are e.g. using the `frameRange` option to render frames `20-39`, your component will now never mount at frame `0` after this update.\\n\\n## Up next\\n\\nWe are working on revamping the rendering pipeline and adding more ways to render a Remotion video and plan to release this as a major version bump (v3.0) with some breaking changes. Stay tuned for announcements on how we make Remotion much easier to scale."},{"id":"2-3","metadata":{"permalink":"/blog/2-3","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-08-11-remotion-2-3.md","source":"@site/blog/2021-08-11-remotion-2-3.md","title":"Remotion 2.3","description":"Remotion 2.3 is out and features first-class support for still images!","date":"2021-08-11T00:00:00.000Z","formattedDate":"August 11, 2021","tags":[],"readingTime":3.26,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Remotion Creator","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 2.4","permalink":"/blog/2-4"},"nextItem":{"title":"Remotion 2.2","permalink":"/blog/2-2"}},"content":"Remotion 2.3 is out and features [first-class support for still images](/docs/stills)!\\n\\nSo far we focused on streamlining the workflow for making videos. While it was always possible to render out a single image instead of an encoded video, we have optimized this use-case in this release.\\n\\n## New `<Still />` component\\n\\n[This new component](/docs/still) is the same as [`<Composition />`](/docs/composition) but is meant for defining a compositions that output a still image. Since it\'s already implied, you don\'t have to define the `fps` and `durationInFrames` properties.\\n\\n```tsx twoslash\\nimport {Still} from \'remotion\';\\nconst Thumbnail: React.FC = () => null;\\n// ---cut---\\n<Still\\n  id=\\"Thumbnail\\"\\n  component={Thumbnail}\\n  width={1200}\\n  height={627}\\n  defaultProps={{\\n    title: \'Welcome to Remotion\',\\n    description: \'Edit Video.tsx to change template\',\\n    slogan: \'Write videos\\\\nin React\',\\n  }}\\n/>\\n```\\n\\n## Optimized editor for stills\\n\\nThere are now icons in the sidebar for compositions, and those who are stills have an image icon.\\n\\n<p align=\\"center\\">\\n  <img style={{maxWidth: 300}} src=\\"/img/still-thumbnail.png\\"/> <br/>\\n  <em><sub>Now still images (compositions with a duration of 1 frame) are marked with a special icon.</sub></em>\\n</p>\\n\\nFor still images, you don\'t need the timeline, so it will hide itself and give you a bigger canvas.\\n\\n<p align=\\"center\\">\\n  <img style={{maxWidth: 600}} src=\\"/img/notimeline.png\\"/> <br/>\\n</p>\\n\\n## New `remotion still` command\\n\\nRendering stills has become easier as well. The new `remotion still` command allows you to quickly generate a PNG or JPEG on the command line.\\n\\n```console\\nnpx remotion still --props=\'{\\"custom\\": \\"data\\"}\' src/index.tsx my-comp out.png\\n```\\n\\n## New `renderStill()` API\\n\\nIf you render using the Node.JS APIs, we have a new equivalent API for rendering stills as well.\\n\\n```ts twoslash\\n// @module: ESNext\\n// @target: ESNext\\nimport {bundle} from \'@remotion/bundler\';\\nimport {\\n  getCompositions,\\n  renderStill\\n} from \'@remotion/renderer\';\\n\\n// The composition you want to render\\nconst compositionId = \'HelloWorld\'\\n\\nconst bundleLocation = await bundle(require.resolve(\'./src/index\'))\\n\\nconst comps = await getCompositions(bundleLocation, {\\n  inputProps: {\\n    custom: \'data\',\\n  },\\n})\\nconst composition = comps.find((c) => c.id === compositionId)\\n\\nif (!composition) {\\n  throw new Error(`No composition with the ID ${compositionId} found`)\\n}\\n\\n// ---cut---\\n\\nawait renderStill({\\n  composition,\\n  webpackBundle: bundleLocation,\\n  output: \'/tmp/still.png\',\\n  onError: (error) => {\\n    console.error(\\"The following error occured when rendering the still: \\", error.message)\\n  },\\n  inputProps: {\\n    custom: \'data\'\\n  }\\n})\\n```\\n\\n## New Stills template with server rendering\\n\\n[We have made a new template](https://github.com/remotion-dev/template-still) that includes a social media preview card and a server that you can customize and easily deploy to the cloud. We have tested it on DigitalOcean and Heroku and have added instructions on how to deploy it.\\n\\nWe use this service to generate the social preview card for the blog post you are reading right now. Feel free to go to this URL and play around with the parameters:\\n\\nhttps://remotion-still.herokuapp.com/PreviewCard.jpeg?title=Remotion%202.3&description=%3CStill%20/%3E%20component,%20renderStill()%20API,%20optimized%20editor%20and%20CLI,%20Server%20rendering%20template\\n\\nThe server includes different caching options, rate limiting and limits to 1 render at a time, so hopefully it\'s ready for production. We put the URL out there for you play around with it, should there be any unexpected problems, we\'ll fix the template.\\n\\n## \ud83d\udd1c Serverless in the works\\n\\nWe are also working on getting still image rendering working in a serverless environment and providing a framework for it. We aim to launch it this fall - if you are interested in testing an early version, [write us a message in our Discord](https://discord.gg/6VzzNDwUwV).\\n\\n## `yarn create video` now has multiple templates\\n\\nWhen creating a new video, you now get to choose between different templates, that give you a great starting point for your usecase.\\n\\n<p align=\\"center\\">\\n  <img style={{maxWidth: 600}} src=\\"/img/yarncreatetemplate.png\\"/> <br/>\\n</p>\\n\\nIn addition to the default template and the previously announced Three.JS template, there now is also a plain-JS template, a text-to-speech template and the above mentioned Stills template.\\n\\n## Player now supports space key to play/pause\\n\\nThe `<Player />` component now supports the new [`spaceKeyToPlayOrPause`](https://www.remotion.dev/docs/player/#spacekeytoplayorpause) prop to toggle the video playback. We designed it with focus management in mind so it behaves well when multiple players are on the same page. This prop is by default `true`."},{"id":"2-2","metadata":{"permalink":"/blog/2-2","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-07-09-remotion-2-2.md","source":"@site/blog/2021-07-09-remotion-2-2.md","title":"Remotion 2.2","description":"Welcome to the release notes of Remotion 2.2! It\'s been a while since v2.1, but in the meanwhile we had a dozen smaller releases inbetween. This post summarizes the highlights of the past 2 months \ud83c\udf89.","date":"2021-07-09T00:00:00.000Z","formattedDate":"July 9, 2021","tags":[],"readingTime":8.91,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Remotion Creator","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 2.3","permalink":"/blog/2-3"},"nextItem":{"title":"Remotion 2.1","permalink":"/blog/2-1"}},"content":"import { ThreeDPlayer } from \\"../components/3DPhonePlayer.tsx\\";\\n\\nWelcome to the release notes of Remotion 2.2! It\'s been a while since v2.1, but in the meanwhile we had a dozen smaller releases inbetween. This post summarizes the highlights of the past 2 months \ud83c\udf89.\\n\\n## Environment variable support\\n\\nWe developers use environment variables extensively to manage configuration, secrets and other stuff you don\'t want to commit to a GitHub repo. If you write videos with code, environment variables are useful too!\\n\\nWe added support for environment variables from the CLI, using a `.env` file, and allowing you to pass environment variables via our Node.JS APIs too. [Click here to learn more.](/docs/env-variables)\\n\\n## `<Freeze />` component\\n\\nThis new core component will freeze all of it\'s children and make them think that the video is paused at a certain time.\\n\\nYou can use it for example to display a still frame from a video:\\n\\n```tsx twoslash title=\\"MyVideo.tsx\\"\\nimport {Freeze, Video} from \'remotion\';\\nimport myVid from \'./vid.mp4\';\\n\\nexport const MyVideo = () => {\\n  return (\\n    <Freeze frame={30}>\\n      <Video src={myVid} />\\n    </Freeze>\\n  )\\n}\\n```\\n\\nHowever, it works for any content. As you can see the API is dead simple! You can combine it with the [`<Sequence>`](/docs/sequence) API to make any content play, pause and then continue again.\\n\\n[Read the docs for the `<Freeze />` component here.](/docs/freeze)\\n\\n## Video + Audio `playbackRate`\\n\\nThis prop allows you to slow down or speed up video and audio elements! Now you can import a video in normal speed and play it in slow motion or timelapse without re-rendering the video.\\n\\n```tsx twoslash title=\\"LightningSpeed.tsx\\"\\nimport {Video} from \'remotion\';\\nimport myVid from \'./vid.mp4\';\\n\\nexport const MyVideo = () => {\\n  return (\\n    <Video src={myVid} playbackRate={4}/>\\n  )\\n}\\n```\\n\\nWhile previewing, we are using the HTML5 `playbackRate` API, and when rendering, we will calculate the correct FFMPEG command for any tempo.\\n\\nLearn more about the `playbackRate` props for [`<Audio />`](/docs/audio/#controlling-playback-speed) and [`<Video />`](/docs/video/#controlling-playback-speed).\\n\\n## `@remotion/three` package\\n\\nIn case you missed it, we released a new helper package for [React Three Fiber](https://github.com/pmndrs/react-three-fiber)!\\n\\n<ThreeDPlayer />\\n<br/>\\n\\nThree.JS is admittedly not easy, but with the work that [Poimandres](https://github.com/pmndrs) is doing to make it more approachable and more integrated with React, this is changing rapidly. Creating 3D videos in React and rendering them to real MP4 videos, we are making it possible!\\n\\nLearn more about [`@remotion/three`](/docs/three) and get started using our [template](https://github.com/remotion-dev/template-three).\\n\\n## ProRes support and MKV support\\n\\nCreating MP4 videos with React, that\'s just our marketing tagline. We support a lot of other codecs too, [like H265, WebM, and even transparent WebM!](/docs/encoding)\\n\\nWe are adding two more codecs:\\n\\n- ProRes is a codec suitable for video editors using Final Cut Pro, Adobe Premiere or Davinci Resolve. Say you want to create an overlay animation using Remotion and use it in a traditional video cutting program, you can now use ProRes to export the video with an alpha channel and import it to many other programs losslessly.\\n\\n- The Matroska container format (which can be recognized using the `.mkv` extension) is a format that commonly also just contains the H.264 videos, the same codec used for MP4s. However it has more flexibility for audio and allows lossless audio streams to be contained by the format. MKV support will come in handy for an upcoming Remotion feature, and is the first step in allowing us to go to the moon.\\n\\nRead the [Encoding guide](/docs/encoding) to see an overview of all options.\\n\\n## `<Player />` updates\\n\\nThe [`@remotion/player`](/docs/player), currently still experimental, allows Remotion videos to be played on the web without having to encode them. We\'ve made the following progress towards getting it stable:\\n\\n### Audio controls\\n\\nA player now has a volume slider, and a mute button to allow the user to control the video. You can decide whether you want to display these controls using the [`showVolumeControls`](/docs/player/#showvolumecontrols) prop.\\n\\nAudio can also be controlled programmatically. We added the methods [`getVolume()`](/docs/player/#getvolume), [`setVolume()`](/docs/player/#setvolume), [`mute()`](/docs/player/#mute), [`unmute()`](/docs/player/#unmute) and [`isMuted()`](/docs/player/#ismuted) to allow you to implement your own solutions.\\n\\n### `timeupdate` event\\n\\nInspired by the HTML5 event with the same name, we added a [`timeupdate`](/docs/player/#timeupdate) event to the Player. Unlike the [`seeked`](/docs/player/#seeked) event, it does not fire on every frame, so if you want only periodic updates about the time being updated, you can use this event without having to throttle it.\\n\\n### [`clickToPlay`](/docs/player/#clicktoplay) prop\\n\\nThis prop allows you to control whether the user is allowed to click on the video to make it pause or play. It is true by default if the controls of the player are enabled.\\n\\n### [`doubleClickToFullscreen`](/docs/player/#doubleclicktofullscreen) prop\\n\\nThis prop allows you to control whether the user is allowed to double click on the video to make it go fullscreen. If enabled, single-clicking to pause the video will have a short delay in order to wait for a potential second click.\\n\\n## Timeline scroll position gets persisted\\n\\nWhen coding a video, and refreshing the preview, the video would jump back to the first frame which was annoying. Not anymore - if you refresh you are back where you left off!\\n\\n## Remotion waits for fonts to be loaded\\n\\nIf a Webfont gets loaded via Google Fonts, it would be loaded using `font-display: swap`, which means Remotion would sometimes render a frame before the font is loaded. Now we use the `document.fonts.ready` browser API to make loading webfonts completely seamless for you.\\n\\n## Specify a custom `--port`\\n\\nBy default the Remotion preview starts a server on port 3000. Should you want to have it start on a different port for any reason, you can now pass a CLI flag.\\n\\n## More helpful error handling\\n\\nWe want to help you out whenever you are facing a tricky issue. Here are some examples of scenarios where we now give you a helpful warning and linking to the documentation:\\n\\n- Multiple versions of Remotion are imported on a page (for example when using the `<Player />` in your app)\\n- A video is loaded that does not support seeking (for example when serving from Google Cloud Storage)\\n- A video with an unsupported codec is loaded (for example an MP4 in the Chromium browser)\\n- A `delayRender()` handle has been created but never cleared\\n\\n## Documentation upgrades\\n\\n### Search\\n\\nWe now have a search at the top right of the docs! Thanks to Algolia for hosting the widget and indexing the documentation.\\n\\n### Type hints\\n\\nDid you notice it in the snippets above? You can now hover over any symbol and see it\'s type. It\'s powered by Typescript + Twoslash. A really nice side effect is that it\'s now impossible for us to make typos in the documentation since all snippets are type checked.\\n\\n### Troubleshooting guides\\n\\nWe now have [help articles on various issues](/docs/timeout) that you may face. Currently we have written about 6 common problems, and put them in a new section of the docs called Troubleshooting.\\n\\n### Page about third party integrations\\n\\n[A new page](/docs/third-party) has been created listing some popular libraries and describing how well they work together with Remotion - or don\'t.\\n\\n### New landing page\\n\\nFinally, the [homepage of Remotion](https://remotion.dev) got a makeover! We hope to better communicate what Remotion is and why it\'s awesome.\\n\\n## Various Bugfixes\\n\\n- Fixed a memory leak while calling getCompositions() [#480](https://github.com/remotion-dev/remotion/pull/480)\\n- Add emoji support to Dockerfile [#476](https://github.com/remotion-dev/remotion/pull/476)\\n- The preview now shows the current time within a sequence in a timeline [#468](https://github.com/remotion-dev/remotion/pull/468)\\n- TTF fonts can now be loaded locally [#462](https://github.com/remotion-dev/remotion/pull/462)\\n- Fix Remotion Player assuming it\'s in a rendering environment [#460](https://github.com/remotion-dev/remotion/pull/460)\\n- Fix getAudioMetadata() and getAudioDuration() not returning an error in the `onError` event [#459](https://github.com/remotion-dev/remotion/pull/459)\\n- Added documentation on how to use TailwindCSS [`69b079e`](https://github.com/remotion-dev/remotion/commit/69b079e)\\n- Fixed documentation about how to use SASS/SCSS [`e92c917`](https://github.com/remotion-dev/remotion/commit/e92c917)\\n- If you are using a plain JS entry file, you can also use a remotion.config.js config file [#475](https://github.com/remotion-dev/remotion/pull/475)\\n- You can customize how many timeline tracks should be shown at most using `Config.Preview.setMaxTimelineTracks()` [#439](https://github.com/remotion-dev/remotion/pull/439)\\n- Fixed a bug where environment variables would not be immediately accessible [#432](https://github.com/remotion-dev/remotion/pull/432)\\n- Input props flag can now also be passed for preview [#430](https://github.com/remotion-dev/remotion/pull/430)\\n- Better input validation of the most common functions\\n- Improve rendering of very long videos, using less memory and avoiding a maximum callstack exceeded error message. [#398](https://github.com/remotion-dev/remotion/pull/398)\\n- Setting `crf` to 0 is not allowed anymore for H264 videos as it will lead to a video that does not play on all platforms. [#379](https://github.com/remotion-dev/remotion/pull/379)\\n- The docs for `<Sequence />` now have interactive examples. [#378](https://github.com/remotion-dev/remotion/pull/378)\\n- A lot of tests have been added to the core functions. [#376](https://github.com/remotion-dev/remotion/pull/376) etc.\\n- The Typescript types have been improved to allow for more types of components to be passed to `component`. [#372](https://github.com/remotion-dev/remotion/pull/372)\\n\\n## Thank you to all the contributors\\n\\nMost of these features were brought up and implemented by the community which is super awesome. Time for some shoutouts!\\n\\n- Thanks to [Bj\xf6rn Zeutzheim](https://github.com/olee) for implementing the `@remotion/three` package!\\n- Thanks to [Frenco](https://github.com/frencojobs) for making all documentation code snippets typesafe and adding hover preview. You even fixed a bug in Twoslash, the library powering this feature and executed this with so much care!\\n- Thanks to [cnnr](https://github.com/cnnrhill) for implementing environment variables support!\\n- Thanks to [Arthur Denner](https://github.com/arthurdenner) for discovering the `document.fonts.ready` feature!\\n- Thanks to [Ashik Meerankutty](https://github.com/ashikmeerankutty) for implementing the `timeupdate` event for the Player!\\n- Thanks to [Soham Shah](https://github.comsohamsshah) for adding GitHub Issue Templates and working on a Next.JS template!\\n- Thanks to [William Candillon](https://github.com/wcandillon) for implementing ProRes support!\\n- Thanks to [Salvatore](https://github.com/dested) for implementing `playbackRate` support for Video and Audio components!\\n- Thanks to [ahgsql](https://github.com/ahgsql) for improving how Sequences are displayed in the timeline!\\n- Thanks to [Mika Andrianarijaona](https://github.com/mikaoelitiana) for implementing the `--port` parameter!\\n- Thanks to [Jonas Brunner](https://github.com/j0nezz), [Tobias Boner](https://github.com/dydent) and [Calvin Falter](https://github.com/calvin-f) for vastly improving the test coverage!\\n- Thanks to [Tam\xe1s Sallai](https://github.com/sashee) for filing and commenting many important issues and drafting accessibility features.\\n\\nAs well as many other contributing bugfixes and documentation improvements.\\n\\n## Business update\\n\\nWe start seeing people launching products and startups using Remotion, which is awesome. Stay tuned for posts that highlight how people are using Remotion for their business case! At the time of writing, five customers are currently in possession of a [Company license](https://companies.remotion.dev).\\n\\nIn addition to [Shankhadeep Dey](https://github.com/iamshankhadeep), we are also welcoming [Mehmet Ademi](https://github.com/MehmetAdemi) to the team as a project manager and business developer.\\n\\nWe are increasingly putting [bounties on non-urgent issues](https://github.com/remotion-dev/remotion/issues?q=+label%3A%22%3Adollar%3A+Funded+on+Issuehunt%22+) and have rewarded\\n$657 to Remotion contributors to far, in addition to multiple thousands of dollars being paid out to top contributors that were approached by us.\\n\\nWe are working on multiple fronts to make Remotion even better for businesses and Indie Hackers that want to integrate programmatic video into their product - stay tuned!"},{"id":"2-1","metadata":{"permalink":"/blog/2-1","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-05-06-remotion-2-1.md","source":"@site/blog/2021-05-06-remotion-2-1.md","title":"Remotion 2.1","description":"This releases features new utility functions, improved developer experience and an experimental release of the Remotion Player!","date":"2021-05-06T00:00:00.000Z","formattedDate":"May 6, 2021","tags":[],"readingTime":2.77,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 2.2","permalink":"/blog/2-2"},"nextItem":{"title":"Remotion 2.0","permalink":"/blog/2-0"}},"content":"import { PlayerExample } from \\"../components/Player.tsx\\";\\nimport { ExperimentalBadge } from \\"../components/Experimental.tsx\\";\\n\\nThis releases features new utility functions, improved developer experience and an experimental release of the Remotion Player!\\n\\n## New `interpolateColors()` function \ud83c\udf08\\n\\nNow you can easily animate between colors and mix colors to create interesting animations using [`interpolateColors()`](/docs/interpolate-colors).\\n\\nI personally used it to recreate [Apple\'s \'Spring Loaded\' logo in Remotion](https://github.com/jonnyburger/spring-loaded) using only `<div>` elements.\\n\\n<img src=\\"https://github.com/JonnyBurger/spring-loaded/raw/main/out.gif\\" />\\n\\nThanks for [Shankhadeep Dey](https://github.com/Iamshankhadeep) for implementing this feature!\\n\\n## New `measureSpring()` function \ud83c\udf00\\n\\nOne problem when using a spring animation for transitions\\nis that you don\'t know the duration of the animation. This is why we added a new [`measureSpring()`](/docs/measure-spring) function!\\n\\nNow you can adjust your timings in Remotion dynamically when changing spring configurations.\\n\\nThanks to [Samuel Rodriguez-Lozano](https://github.com/samuel3105) for implementing this feature!\\n\\n## Documentation and developer experience updates\\n\\nWe invested time in making sure that if something goes wrong, you don\'t get stuck. Here are some things we did to improve your experience with Remotion:\\n\\n- If you encounter a timeout, you will now see a stacktrace of where the `delayRender()` handle was not cleared. We also now have a [troubleshooting page for timeouts](/docs/timeout) and link to the documentation if you encounter the error.\\n- If you use Chromium and import an MP4 video, you get a more helpful error and we link to a [help page](/docs/media-playback-error).\\n- We added a guide for improving [performance](/docs/performance) while development and while rendering.\\n- The server-side rendering APIs [`bundle()`](/docs/bundle), [`getCompositions()`](/docs/get-compositions), [`renderFrames()`](/docs/render-frames) and [`stitchFramesToVideo()`](/docs/stitch-frames-to-video) with all their parameters are now more properly documented.\\n- If an exception is thrown while rendering, the log output in the console is now better.\\n\\n## Alpha release of `@remotion/player`\\n\\n<ExperimentalBadge/>\\n\\nWe are working on a Remotion player component that you can import into your React app. Today we are prereleasing the player for those who wish to experiment and provide us with feedback. Let us know what you think!\\n\\n[**Read the documentation for `@remotion/player`**](/docs/player)\\n<PlayerExample />\\n\\n## Test coverage updates\\n\\nWe now have over 450 tests, and the Remotion core has a test coverage of over 80% now. Thanks to Tobias Boner, Calvin Falter and Jonas Brunner for continuining their massive testign initiative!\\n\\nWe now also test across different node versions (12, 14 and 16), npm versions (v6 and v7) and FFMPEG versions (4.1 and 4.4) in addition to testing on 3 different operating systems so we can confidently release new features quickly.\\n\\nFor contributors, we now have a [TESTING.md](https://github.com/remotion-dev/remotion/blob/main/TESTING.md) file.\\n\\n## Miscellaneous\\n\\n- You can now press <kbd>Shift+Right Arrow</kbd> to jump 1 second forward in the timeline and <kbd>Shift+Left Arrow</kbd> to jump 1 second back.\\n- `npm init video` will now setup a Remotion project with NPM, `yarn create video` will setup a project with Yarn.\\n- Node 16 and NPM 7 is now better supported, no warnings will be shown during installation and execution.\\n- Fixed several audio rendering issues: [#292](https://github.com/remotion-dev/remotion/issues/292 [#293](https://github.com/remotion-dev/remotion/issues/293) [#320](https://github.com/remotion-dev/remotion/issues/320)\\n- When the update banner appears in the editor, you can now click to copy the command.\\n- You can now pass a React `ref` to `<Audio/>` and `<Video />` tags.\\n- We revamped the CLI output! How do you like it?\\n- The preview size option in the editor is now persisted, thanks [Oluwatobiju Judah](https://github.com/Tobijudah)!\\n- In the editor, the transparency toggle is now enabled by default."},{"id":"2-0","metadata":{"permalink":"/blog/2-0","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-04-15-remotion-2-0.md","source":"@site/blog/2021-04-15-remotion-2-0.md","title":"Remotion 2.0","description":"This is our biggest and best release so far - today we are unloading a lot of awesome, highly requested features!","date":"2021-04-15T00:00:00.000Z","formattedDate":"April 15, 2021","tags":[],"readingTime":6.89,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 2.1","permalink":"/blog/2-1"},"nextItem":{"title":"Announcing pricing for company licenses","permalink":"/blog/company-licenses"}},"content":"This is our biggest and best release so far - today we are unloading a lot of awesome, highly requested features!\\n\\n## Audio support\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/audio.mp4\\" type=\\"video/mp4\\" />\\n  </video>\\n</div>\\n\\nWe are happy to ship audio support with a flexible API!\\n\\nYou can [import one or multiple audio tracks into your project, cut, trim and align them in your composition](/docs/using-audio). The volume can be controlled for the entirety of a track, or you can control it frame by frame to create fade effects and much more. Apply your React mindset - Remotion doesn\'t care how you render the audio tag, just that it\'s there. The mechanic of how we tell FFMPEG to mix the audio just like you hear it in the browser preview is really complex and was challenging to build - we are very proud of the outcome!\\n\\n## Audio visualization\\n\\nWith newly introduced audio visualization APIs, you can make your visuals react to the frequency of the audio.\\n\\nWhat you need are the new [`getAudioData()`](/docs/get-audio-data) and [`visualizeAudio()`](/docs/visualize-audio) APIs that have been published [in it\'s own package](/blog/#remotionmedia-utils-package).\\n\\nRead more about [audio visualization](/docs/audio-visualization) in the docs or [watch a sample video](https://twitter.com/JNYBGR/status/1378444074634592262) (the source can be found [here](https://github.com/yuta0801/remotion/blob/1103092f4902fb11f41877a05398dab6ce7203e7/packages/example/src/AudioVisualization/index.tsx)).\\n\\n## Export as MP3, AAC, WAV\\n\\nYou can now also completely omit the video from the output and only emit an audio file. Yes, Remotion can also be used as an audio editing program! Pass `mp3`, `aac` or `wav` as a codec [using the `--codec` flag](/docs/cli#flags) or [in your config file](/docs/config#setcodec).\\n\\n## `@remotion/media-utils` package\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/mediautils.mp4\\" type=\\"video/mp4\\" />\\n  </video>\\n</div>\\n\\nThis is a new helper package which includes functions useful for dealing with audio. Besides audio visualization, you can also for example measure the duration of an audio or video source, which is really useful for making a composition duration dynamic. The functions included are [`getAudioData()`](/docs/get-audio-data), [`getAudioDuration()`](/docs/get-audio-duration), [`getVideoMetadata()`](/docs/get-video-metadata), [`getWaveformPortion()`](/docs/get-waveform-portion), [`visualizeAudio()`](/docs/visualize-audio) and [`useAudioData()`](/docs/use-audio-data).\\n\\nAll of them except the last one are completely independent from the ideas of Remotion, so they might be a great fit for your other non-Remotion projects as well! This package is MIT-licensed, so you everybody can use it without obtaining a company license.\\n\\n## Rich Timeline (experimental)\\n\\nWith the normal timeline, you don\'t see the full picture of all the media that you have placed in your composition. The reason is that the visualization you see is based on what\'s currently rendered at the position of your playhead.\\n\\nIntroducing a new timeline mode: The [**rich timeline**](/docs/timeline) will render additional frames other than the current one to gather enough information to visualize a full timeline.\\nSequences which are normally not rendered because the playback head is not within the time range of the sequence, will appear because Remotion is doing an additional render at a time where the sequence is visible.\\n\\n<img src=\\"/img/timeline.png\\"></img>\\n\\nBy default the **rich timeline** feature is disabled, but will be enabled by default if the feedback is good. You may switch between the rich timeline and simple timeline by clicking the icon with the three lines. Try it out and let us know what you think!\\n\\n<img src=\\"/img/timeline-toggle.png\\"></img>\\n\\n## ESBuild loader\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/esbuild.mp4\\" type=\\"video/mp4\\" />\\n  </video>\\n</div>\\n\\nThe traditional transpilation of Javascript and Typescript using `babel-loader` has been replaced by the faster `esbuild-loader` by default.\\n\\nThis will speed up bundling by a lot - hopefully you won\'t notice any other differences! If you for some reason need to go back to the previous behavior, you may override the Webpack config - [we are releasing a helper that makes it easy](/docs/legacy-babel).\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/esbuild-loader.webm\\" type=\\"video/webm\\" />\\n  </video>\\n</div>\\n\\n## Webpack caching\\n\\nEven though transpilation is done using ESBuild now, Webpack is still being used for bundling. We rely on Webpack features such as Hot Module Replacement, asset importing, it\'s strong loader ecosystem and now it\'s caching features.\\n\\nWhen you run `npm run build` for the first time, you will get a message that a cache is building. From the second time on, bundling will be much faster, even if you change your code. You shouldn\'t have to ever do it, but you can [opt out of caching](/docs/config#setcachingenabled).\\n\\n## Partial video rendering + Stills\\n\\nWant to render partial video or a still for thumbnail? You can do that with Remotion 2.0. We introduced a new CLI flag `--frames` to render a subset or a still of a video.\\n\\n`--frames=0-9` (To select the first 10 frames) or `--frames=50` (To render a still of the 51st frame).\\n\\nLearn more about the [`--frames`](/docs/config#setframerange) CLI option.\\n\\n## `@remotion/gif` component\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/gif.mp4\\" type=\\"video/mp4\\" />\\n  </video>\\n</div>\\n\\nA new GIF component released in the `@remotion/gif` package is now available. The `<Gif />` component allows to load a local or remote GIF and synchronizes it with Remotions `useCurrentFrame()`. For that it parses the GIF using WebAssembly - basically it\'s really cool tech! Thanks a lot to [@jeetiss](https://github.com/jeetiss) for contributing this new component.\\n\\n[Learn more about the GIF component here](/docs/gif).\\n\\n## Resizable editor panels\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/resizeable.mp4\\" type=\\"video/mp4\\" />\\n  </video>\\n</div>\\n\\nIn the editor, you can now resize the timeline as well as the left sidebar. Thanks a lot to [Arthur Denner](https://github.com/arthurdenner) for this awesome contribution!\\n\\n## interpolate()\\n\\n`interpolate()` now supports arrays with lengths bigger than 2. Really useful for a lot of scenarios - for example you can create a combined fade in/fade out transition with one line.\\n\\n```tsx\\nconst opacity = interpolate(frame, [0, 10, durationInFrames - 10, durationInFrames], [0, 1, 1, 0])\\n```\\n\\n## 170+ tests added\\n\\n<div>\\n  <video width=\\"100%\\" height=\\"100%\\" controls playsInline autoPlay muted loop>\\n    <source src=\\"/img/tests.mp4\\" type=\\"video/mp4\\" />\\n  </video>\\n</div>\\n\\nWhile not strictly a new feature, this is definitely worth mentioning.\\n\\n[Calvin Falter](https://github.com/calvin-f), [Jonas Brunner](https://github.com/j0nezz) and [Tobias Boner](https://github.com/dydent) took Remotion as their project for their university seminar and contributed over 100 tests, strengthening the code and ironing out edge cases.\\n\\n[@cnnr](https://github.com/cnnrhill) contributed a really cool end-to-end test that tests the video seeking of Remotion and makes sure it is frame-accurate by matching the colors in each frame.\\n\\nThe remaining added tests are testing the tricky parts of audio rendering. Thanks to test-driven development, we\'ve been able to catch regressions and ship really solid audio support.\\n\\nThe bottom line: In Remotion 1.5.4 we had total 43 tests, in Remotion 2.0 we added a total of 174 tests to come out at a total of 217.\\n\\n## `<Video/>` and `<Audio/>` have `startFrom` and `endAt` props\\n\\nThese new props make it easier to cut the start or the end of the video. This is implemented using sequences, which was also possible before, but this is a convienient shorthand.\\n\\n## Fixed: Frame seeking\\n\\nIn Remotion 1.x, a `<Video/>` would not always perfectly synchronize with Remotions time during render. This is now fixed and validated by tests that scan the color of the output frames - [however not in the most efficient way](https://github.com/remotion-dev/remotion/issues/200). Help on improving it further is still welcome.\\n\\n## Fixed: Timeouts while importing large videos\\n\\nImporting files into your webpack bundle that were of significant size (the problems started at around 40MB) led to slow renders and timeouts. This is now fixed by swapping out dependencies and making sure the whole stack supports the HTTP range header well. Now if you seek a video, only the necessary parts will be loaded from the filesystem rather than the whole file being read.\\n\\n## Breaking changes and upgrade\\n\\nWe\'ve taken this opportunity of a major release to introduce some breaking changes that we think are beneficial for an awesome future of Remotion. Please take a moment to read through the [2.0 Migration guide](/docs/2-0-migration) and see if you are affected.\\n\\n## The future\\n\\nMost of the core functionality for making videos in React is now implemented.\\nThis gives us time to focus on improving all the areas around it - we are talking better documentation, developer experience, examples, abstractions on top or Remotion, improving speed and reliability of Remotion.\\n\\nFurthermore, we want to provide a way to embed Remotion compositions in traditional web apps and to make server-side rendering easier - stay tuned!"},{"id":"company-licenses","metadata":{"permalink":"/blog/company-licenses","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-03-15-company-licenses.md","source":"@site/blog/2021-03-15-company-licenses.md","title":"Announcing pricing for company licenses","description":"We got rid of the \\"Contact us for pricing\\" policy and have announced the pricing for Remotion publicly. Head over to companies.remotion.dev to see it!","date":"2021-03-15T00:00:00.000Z","formattedDate":"March 15, 2021","tags":[],"readingTime":0.33,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 2.0","permalink":"/blog/2-0"},"nextItem":{"title":"Remotion 1.5","permalink":"/blog/1-5"}},"content":"We got rid of the \\"Contact us for pricing\\" policy and have announced the pricing for Remotion publicly. Head over to [companies.remotion.dev](https://companies.remotion.dev) to see it!\\n\\n![Remotion Pricing](/img/pricing.png)\\n\\nThis is a new platform where you can directly buy a Remotion license, get invoices, upgrade/downgrade or cancel without having to get in touch with us.\\n\\nNeedless to say, you can still [email us](mailto:hi@remotion.dev) if you like a consultation!"},{"id":"1-5","metadata":{"permalink":"/blog/1-5","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-03-03-remotion-1-5.md","source":"@site/blog/2021-03-03-remotion-1-5.md","title":"Remotion 1.5","description":"This release contains no big new features, but addresses some common problems.","date":"2021-03-03T00:00:00.000Z","formattedDate":"March 3, 2021","tags":[],"readingTime":2.45,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Announcing pricing for company licenses","permalink":"/blog/company-licenses"},"nextItem":{"title":"Remotion 1.4","permalink":"/blog/1-4"}},"content":"This release contains no big new features, but addresses some common problems.\\n\\n## No Chromium download necessary\\n\\nUntil now, every time you ran `yarn create video`, a binary of Chromium was installed, which was slow and took a lot of space (between 170-280MB depending on the OS). Making matters even worse, these binaries would not include the codec required to play MP4 videos, meaning if you wanted to embed one, you had to convert it to WebM first.\\n\\nNow Remotion will try to find an existing installation of Chrome on your machine and if it finds one, it will use it and skip the download. If it doesn\'t find one, you can specify the path using the [`setBrowserExecutable()`](/docs/config#setbrowserexecutable) option or the [`--browser-executable`](/docs/cli) command line flag.\\n\\nIf you are running Remotion on a machine where neither Chrome nor Chromium is installed, Remotion will still download a version from the internet. However, the download only happens when you invoke `npm run build` for the first time, so you don\'t have to wait so long before you can start experimenting.\\n\\n## Improved Apple Silicon and WSL support\\n\\nApple Silicon support is another nice side-effect of the Puppeteer refactor, since previously the installation would fail because no Chromium binaries were available for the Apple Silicon architecture. Now that Remotion will try to use the local Chrome installation this is way less likely to happen.\\n\\nOn Windows Subsystem for Linux, a missing flag would lead to Remotion getting stuck during rendering. This is now fixed. Linux users also need to install some additional libraries, [which is now documented](/docs/#additional-step-for-linux-users).\\n\\n## Smoother timeline\\n\\nWhy would the timeline of your 30 FPS only play at 28.7FPS? Turns out it\'s a bug that was investigated and fixed by [yuta0801](https://github.com/remotion-dev/remotion/pull/148)! Now the playback during preview is smoother and the FPS counter is way more likely to display a number matching your desired FPS.\\n\\n## Failing to render a frame fails hard\\n\\nIf a frame fails to render for some reason (such as calling `delayRender()` and never resolving the lock), this will now stop the rendering process. Previously you would get an error message but Remotion would keep trying and keep failing.\\n\\n## Rendering will happen on a localhost server\\n\\nPreviously during rendering, frames would be opened via `file://` protocol and get screenshotted. Now the frames are being served on `http://localhost:3000` (if port is not available, it will try 3001, 3002, etc.), which is the same behavior as in the preview.\\n\\nNow APIs can now simply whitelist localhost domains in their CORS configurations, and you can more easily use those APIs to feed data into your video.\\n\\n## New tutorial: Programmatic Instagram Stories\\n\\nIn case you missed it, I released a new tutorial showing the workflow of how to programmatically create Instagram Stories with dynamic content. [You can watch it here.](https://www.youtube.com/channel/UCsBAIv086U4dViuxXJLMJpg)\\n\\n## Upgrade\\n\\nAs always, you can upgrade to the newest version by running `npm run upgrade` in your Remotion project."},{"id":"1-4","metadata":{"permalink":"/blog/1-4","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-02-26-remotion-1-4.md","source":"@site/blog/2021-02-26-remotion-1-4.md","title":"Remotion 1.4","description":"Welcome to the release notes of Remotion 1.4! This is a big release adding support for more use cases and makes Remotion more stable, intuitive and robust.","date":"2021-02-26T00:00:00.000Z","formattedDate":"February 26, 2021","tags":[],"readingTime":5.96,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 1.5","permalink":"/blog/1-5"},"nextItem":{"title":"Remotion 1.3","permalink":"/blog/1-3"}},"content":"import { TransparentVideoDemo } from \\"../components/TransparentVideoDemo\\";\\n\\nWelcome to the release notes of Remotion 1.4! This is a big release adding support for more use cases and makes Remotion more stable, intuitive and robust.\\n\\n## Support for HEVC and WebM codecs\\n\\nInstead of just supporting H.264, you can now also encode a video in H.265 (HEVC), or as a WebM (in either VP8 or VP9 codec). These codecs will result in smaller file sizes, but have some trade-offs. To help you decide which codec to use, there is now an [encoding guide](/docs/encoding) in the docs. See also the\\ndocumentation for changing the codec in [the config file](/docs/config#setcodec)\\nas well as [in the CLI](/docs/cli#flags).\\n\\n## Transparent videos\\n\\nDid you know that Chrome and Firefox support video with alpha channels? Play the video and click the button below to dynamically change the background.\\n\\n<TransparentVideoDemo />\\n\\nRemotion now has enough configurability to enable you to render transparent videos. There is [a new documentation page](/docs/transparent-videos) for it, which also gives you guidance on how to render a fallback video for unsupported browsers.\\n\\n## New `random()` API\\n\\nLet\'s say you want to render 100 random particles in a video. A common mistake is to generate random values and store them in a state. The following is an anti-pattern in Remotion:\\n\\n```tsx {5-6}\\nexport const MyComp = () => {\\n  // \u26a0\ufe0f Bug! Random values will change during render\\n  const [particles] = useState(() => {\\n    return new Array(100).fill(true).map(() => ({\\n      x: Math.random(),\\n      y: Math.random(),\\n    }));\\n  });\\n};\\n```\\n\\nWhile this will work while previewing the video, during rendering, the random numbers will change during frames. This is because Remotion spins up multiple instances of Chrome and the random numbers will be different in each instance.\\n\\nTo help you avoid this mistake, there is now a new ESLint rule that will warn when you use `Math.random()`. Instead using it, you can use the new [`random()`](/docs/random) API. It will take a `seed` parameter and output a number between 0 and 1. The point of it is: As long as you pass the same seed, you get the same output! That way you don\'t get unintended effects while multithreaded rendering is performed.\\n\\n```tsx twoslash {7-8}\\nimport { useState } from \\"react\\";\\nimport { random } from \\"remotion\\";\\n\\nexport const MyComp = () => {\\n  // \u2705 Pseudo-random values that will be same across threads\\n  const [particles] = useState(() => {\\n    return new Array(100).fill(true).map((_, idx) => ({\\n      x: random(`x-${idx}`),\\n      y: random(`y-${idx}`),\\n    }));\\n  });\\n};\\n```\\n\\nWant to learn more? Read the new documentation page about [using randomness](/docs/using-randomness).\\n\\n## More configuration options\\n\\nSeveral new configuration options have been added as CLI flags, config file entries and to the SSR API:\\n\\n- [setCrf()](/docs/encoding#controlling-quality-using-the-crf-setting) controls the tradeoff between quality and file size of the output file.\\n- [setQuality()](/docs/config#setquality) allows you to control the JPEG quality of the frames rendered.\\n- [setCodec()](/docs/config#setcodec) allows you to select between 4 different codecs (as mentioned above).\\n- [setImageSequence()](/docs/config#setimagesequence) allows you to skip the stitching process and output only an image sequence\\n- [setImageFormat()](/docs/config#setimageformat) allows you to explicitly select either PNG or JPEG as the format for the rendered frames.\\n- [setPixelFormat()](/docs/config#setpixelformat) has a new accepted value, `yuva420p`, which is necessary for transparent videos.\\n\\nThe addition of `setImageSequence()` and `setImageFormat()` as well as `setCodec()` makes the previous configuration options `setOutputFormat()` and `--png` obsolete. and they are therefore now deprecated. While they still work, we encourage you to use the new configuration options which are much more granular - for example now you can render a JPEG sequence if you wish to.\\n\\n## Keyboard controls in the editor\\n\\nThanks to an [awesome pull request by Arthur Denner](https://github.com/arthurdenner), keyboard navigation in the editor is much improved! [Reading the PR](https://github.com/remotion-dev/remotion/pull/125) is highly recommended because it\'s insightful and makes you realize that it\'s not hard to make a website keyboard-navigateable.\\n\\n![keyboard-support.gif](/img/keyboard-support.gif)\\n\\n## Progress bar for stitching frames together\\n\\nDon\'t be surprised if the newly added codecs are much slower than the default H.264. It\'s normal. But at least now you can always check the progress of the rendering!\\n\\n![stitching-progress.png](/img/stitching-progress.png)\\n\\n## New `layout` prop for `<Sequence>`\\n\\nFew people have rightly pointed out that the `<Sequence>` component will absolutely position it\'s children and there is no way to opt out of it. While we cannot change this now because of backwards-compatibility, you can now pass `layout=\\"none\\"` as a prop to opt out of any layout influence that `<Sequence>` has.\\n\\n## Asynchronously determining composition metadata\\n\\nThere\'s a small breaking change in this release - `delayRender` works during the \'evaluation\' phase. This is the phase where Remotion analyses your project and determines all compositions and does some validation. Watch out for `delayRender()` calls outside components, as they might block the evaluation phase now since no components are being rendered during that phase.\\n\\nThe benefit is that now your compositions can take in data that has been asynchronously fetched. For example the following is now possible:\\n\\n```tsx\\nexport const RemotionVideo: React.FC = () => {\\n  const [videoLength, setVideoLength] = useState(null)\\n\\n  useEffect(() => {\\n    const handle = delayRender();\\n\\n    determineVideoLength()\\n    .then((duration) => {\\n      setVideoLength(duration)\\n      continueRender(handle)\\n    })\\n    .catch(err => /**/)\\n  }, [])\\n\\n  if (videoLength === null) {\\n    return null;\\n  }\\n\\n  return (\\n    <>\\n      <Composition\\n        id=\\"HelloWorld\\"\\n        component={HelloWorld}\\n        durationInFrames={videoLength}\\n        fps={30}\\n        width={1920}\\n        height={1080}\\n      />\\n    </>\\n  )\\n}\\n```\\n\\nStay tuned for a new API that will allow you to measure video and audio duration!\\n\\n## End to End tests for Windows, macOS and Ubuntu\\n\\nWhile Remotion is primarily developed on macOS, other operating systems shouldn\'t have a sub-par experience or get bugs. While it does not replace manual testing, it helps that [there are now some end-to-end tests for rendering videos](https://github.com/remotion-dev/remotion/blob/main/tests/rendering.test.ts) and the test suite now runs on all 3 operating systems. Going forward, I will add more tests and contributors are also encouraged to do so.\\n\\n## ESLint rule for wrong asset import\\n\\nIn Remotion, you shouldn\'t specify the `src` as filepath string, but import the asset instead. To help you not make this mistake, there\'s a new ESLint rule:\\n\\n```tsx\\nimport {Img} from \'remotion\';\\nimport hi from \'./hi.png\';\\n\\n// \u2705 Correct: Using an import statement\\n<Img src={hi} />\\n\\n// \u26a0\ufe0f Warning since 1.4: Import the asset instead\\n<Img src=\\"./hi.png\\"/>\\n```\\n\\n## Paying top contributors\\n\\nSince Remotion [will make money by selling licenses to bigger companies](https://github.com/remotion-dev/remotion/blob/main/LICENSE.md), it\'s only fair to give contributors their share as well! I have made offers to two top contributors so far to compensate them for their time spent so far and for potential future work. Gladly, they both accepted!\\n\\n## Various improvements\\n\\n- [Fixed showing floats when fps is not a Integer (e.g 59.97fps)](https://github.com/remotion-dev/remotion/pull/122)\\n\\n- [Ensure minimum node version](https://github.com/remotion-dev/remotion/pull/117)\\n\\n- [Fix flickering `<Video>`](https://github.com/remotion-dev/remotion/pull/118)\\n\\n- [Clean up frames after rendering](https://github.com/remotion-dev/remotion/pull/127)\\n\\n- [Throw error if useVideoConfig is not used in Composition](https://github.com/remotion-dev/remotion/pull/130)\\n\\n- [Don\'t timeout if image fails to load](https://github.com/remotion-dev/remotion/pull/144)\\n\\n- [Runtime error if you miss a prop in `<Composition>` or `<Sequence>`](https://github.com/remotion-dev/remotion/pull/146)\\n\\n## Up next...\\n\\nSome awesome pull requests came in, [the most notable one adds audio support!](https://github.com/remotion-dev/remotion/pull/128) We are also working on allowing you to customize Puppeteer parameters and making the installation process much faster by not downloading a copy of Chromium. Keep your eyes open for more major improvements coming soon."},{"id":"1-3","metadata":{"permalink":"/blog/1-3","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-02-15-remotion-1-3.md","source":"@site/blog/2021-02-15-remotion-1-3.md","title":"Remotion 1.3","description":"Only 1 week after the initial launch, here is Remotion 1.3! In just 7 days, we have merged over 40 pull requests - just amazing! Let\'s go over the changes in this release.","date":"2021-02-15T00:00:00.000Z","formattedDate":"February 15, 2021","tags":[],"readingTime":3.18,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 1.4","permalink":"/blog/1-4"},"nextItem":{"title":"Remotion 1.2","permalink":"/blog/1-2"}},"content":"Only 1 week after the initial launch, here is Remotion 1.3! In just 7 days, we have merged over 40 pull requests - just amazing! Let\'s go over the changes in this release.\\n\\n## 2x faster - again!\\n\\n2 days ago, the rendering time was cut in half, and in this release, we managed to half it again! Check out this benchmark of the [Spotify Wrapped](https://github.com/JonnyBurger/remotion-wrapped) example:\\n\\nRemotion 1.1\\n\\n```console\\nhyperfine --min-runs 5  \'npm run build -- --overwrite --concurrency=16\'\\nBenchmark #1: npm run build -- --overwrite --concurrency=16\\n  Time (mean \xb1 \u03c3):     98.972 s \xb1  0.650 s    [User: 123.329 s, System: 10.103 s]\\n  Range (min \u2026 max):   97.951 s \u2026 99.540 s    5 runs\\n```\\n\\nRemotion 1.3\\n\\n```console\\nhyperfine --min-runs 5  \'npm run build -- --overwrite --concurrency=16\'\\nBenchmark #1: npm run build -- --overwrite --concurrency=16\\n  Time (mean \xb1 \u03c3):     17.921 s \xb1  0.224 s    [User: 36.492 s, System: 3.482 s]\\n  Range (min \u2026 max):   17.650 s \u2026 18.264 s    5 runs\\n```\\n\\nFrom 98 to 18 seconds - that\'s 5.5 times faster! At the same time, we have reached an important milestone: This 19-second long 720p video was rendered faster than realtime. Granted, my computer is faster than most (8-core Intel i9-9900K chip), but still very impressive!\\n\\nWe achieved this performance gain through various Puppeteer rendering pipeline optimizations. Big shoutout to [jeetiss](https://github.com/jeetiss) who implemented a sophisticated performance optimization that doesn\'t require a page reload for each frame anymore.\\n\\n## Plain-Javascript support\\n\\nMy goal was to force Typescript on everybody - but I failed. Support for plain Javascript is now added! See [here](/docs/javascript) how to enable it. Proceed carefully \ud83d\ude48\\n\\n## Type-safe configuration file\\n\\nMany options which you could pass in via CLI flags, you can now also add by adding a `remotion.config.ts` file in the repo. For example, if you want to increase the parallelism to the amount of threads you have and never want to write `--overwrite`, you can add the following to the config file:\\n\\n```tsx\\nimport os from \'os\';\\nimport {Config} from \'remotion\';\\n\\nConfig.Rendering.setConcurrency(os.cpus().length);\\nConfig.Output.setOverwriteOutput(true);\\n```\\n\\nYou can see all the [options on this page](https://www.remotion.dev/docs/config). The goal of making a config file in Typescript is to provide autocomplete, to easily highlight deprecated options and making it easier to show how to migrate in case the options change in the future.\\n\\n## Easing API\\n\\nWhile there was an Easing API, it was undocumented. Learn which [Easing methods](/docs/easing) are available and how to use it with [`interpolate()`](/docs/interpolate)!\\n\\n```tsx\\nimport {interpolate, Easing} from \'remotion\';\\n\\ninterpolate(frame, [0, 100], {\\n  easing: Easing.bezier(0.8, 0.22, 0.96, 0.65),\\n  extrapolateLeft: \'clamp\',\\n  extrapolateRight: \'clamp\',\\n})\\n```\\n\\n## The small things\\n\\n- The exports of Remotion have been cleaned up and the internal stuff has been moved into `Internals`. You shouldn\'t rely on these APIs are you are at risk of them changing over time.\\n\\n- [The bundling step now has a progress indicator.](https://github.com/remotion-dev/remotion/pull/83)\\n\\n- [You can now configure a different pixel format that will be passed to FFMPEG](/docs/config#setpixelformat).\\n\\n- [Class properties are now supported.](https://github.com/remotion-dev/remotion/pull/95)\\n\\n- [PNG sequences now have padded filenames (`element-0000.png` instead of `element-0.png`) for better interoperability with ImageMagick and for ensuring the right order in file explorers](https://github.com/remotion-dev/remotion/pull/91)\\n\\n- [Better error messages for when FFMPEG is not correctly linked on Windows](https://github.com/remotion-dev/remotion/pull/98)\\n\\n- [Lots](https://github.com/remotion-dev/remotion/pull/92) [of](https://github.com/remotion-dev/remotion/pull/93) [spelling](https://github.com/remotion-dev/remotion/pull/85) mistakes fixed!\\n\\n- [Added analytics for docs](https://github.com/remotion-dev/remotion/pull/78) - You can see how many page views the Remotion docs get [here](https://app.splitbee.io/public/remotion.dev).\\n\\n- [Fixed an issue with PowerShell](https://github.com/remotion-dev/remotion/pull/97)\\n\\n- [Fixed a puppeteer issue \\"Session closed. Most likely the page has been closed\\"](https://github.com/remotion-dev/remotion/issues/69).\\n\\n- Big files have been removed from the repository so it\'s faster to clone.\\n\\n## In case you missed it\\n\\nAnother example was added - [Spotify Wrapped!](https://twitter.com/JNYBGR/status/1360269270526136320) This is a fully dynamic example where you can replace all data with a command line flag. There\'s a 2 hour tutorial on YouTube and the source code is on GitHub."},{"id":"1-2","metadata":{"permalink":"/blog/1-2","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-02-13-remotion-1-2.md","source":"@site/blog/2021-02-13-remotion-1-2.md","title":"Remotion 1.2","description":"You have tested Remotion and provided an enormous amount of feedback! Thanks to it, this version of Remotion is vastly improved \ud83c\udf89","date":"2021-02-13T00:00:00.000Z","formattedDate":"February 13, 2021","tags":[],"readingTime":1.34,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 1.3","permalink":"/blog/1-3"},"nextItem":{"title":"Remotion 1.1","permalink":"/blog/1-1"}},"content":"You have tested Remotion and provided an enormous amount of feedback! Thanks to it, this version of Remotion is vastly improved \ud83c\udf89\\n\\n## Rendering time cut in half!\\n\\nIt turns out rendering each frame as JPEG is much faster than rendering them in PNG and results in no visible quality difference. Using this trick, the time of the \'Rendering Frames...\' of an example video went down from 14 seconds to 6.5 seconds! That\'s more than twice as fast.\\n\\nNow that the rendering process is JPEG-based, [a new flag `--quality`](/docs/cli#flags) was added to command line. [For server-side rendering, you may pass in a new `imageFormat`](/docs/ssr#render-a-video-programmatically) option.\\nIf you [render a PNG sequence](/docs/cli#flags), Remotion will of course still deliver PNGs.\\n\\nThe goal is to make rendering even faster, finding further optimizations is going to be a very interesting task!\\n\\n## Windows support\\n\\nWindows support is very important ([_just like PHP_](https://www.youtube.com/watch?t=74&v=jo_B4LTHi3I&feature=youtu.be)). All the bugs that prevented proper Windows installation have now been fixed. Plus I now have a proper Windows setup so from now on Remotion will be tested on Windows as well!\\n\\n## Discord community\\n\\nWe now have a Discord! [Join now and chat about Remotion!](https://discord.gg/6VzzNDwUwV)\\n\\n## Licensing now available\\n\\nThe terms of [the company license](https://github.com/remotion-dev/remotion/blob/main/LICENSE.md#company-license) have now been worked out and a billing system with Stripe has been set up. Contact me for pricing!\\n\\n## Roadmap\\n\\nA GitHub Project board has been setup with the goal [of indicating the next priorities](https://github.com/remotion-dev/remotion/projects/3). Check it out!\\n\\n## Miscellaneous\\n\\n- [Add .dockerignore](https://github.com/remotion-dev/remotion/pull/54)\\n- [Use `npm init video` instead of `npx create-video`](https://github.com/remotion-dev/remotion/pull/49)\\n- [Fix refs of `<Image/>` component](https://github.com/remotion-dev/remotion/pull/66)\\n- [Improve page management pool](https://github.com/remotion-dev/remotion/pull/48)"},{"id":"1-1","metadata":{"permalink":"/blog/1-1","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-02-11-remotion1-1.md","source":"@site/blog/2021-02-11-remotion1-1.md","title":"Remotion 1.1","description":"What an extraordinary launch! In less than 24 hours, the Remotion announcement video has gotten more than 100\'000 views on Twitter. The feedback was absolutely overwhelming!","date":"2021-02-11T00:00:00.000Z","formattedDate":"February 11, 2021","tags":[],"readingTime":1.96,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 1.2","permalink":"/blog/1-2"},"nextItem":{"title":"Introducing Remotion","permalink":"/blog/introducing-remotion"}},"content":"What an extraordinary launch! In less than 24 hours, the Remotion announcement video has gotten more than 100\'000 views on Twitter. The feedback was absolutely overwhelming!\\n\\nNow it\'s time to iterate and make Remotion better. This release contains two new features: Customizing the Webpack configuration and new `<Img>` and `</IFrame>` components!\\n\\n## Customizing Webpack configuration\\n\\n**[See docs](/docs/webpack)**\\n\\nPeople had wild ideas on what to do with Remotion like importing MDX files or using React Native components. Now it is possible!\\n\\nWhen providing the possibility on how to configure Remotion, it was of big importance to provide both a high degree of flexibility and a good developer experience. This is how you update the webpack config:\\n\\n`remotion.config.ts`\\n\\n```ts\\nimport {overrideWebpackConfig} from \'@remotion/bundler\';\\n\\noverrideWebpackConfig((currentConfiguration) => {\\n  return {\\n    ...currentConfiguration,\\n    module: {\\n      ...currentConfiguration.module,\\n      rules: [\\n        ...currentConfiguration.module.rules,\\n        // Add more loaders here\\n      ],\\n    },\\n  };\\n});\\n```\\n\\nThere is a new Remotion config file, that you can write in Typescript. Updating the Webpack config uses the **reducer pattern**: You get the default configuration and it is your responsibility to return an updated Webpack config. You get type checking, auto completion and the flexibility to either only update a single property or pass in a completely new configuration. No black magic here - since this is just a pure function, the outcome will be very predictable.\\n\\n## New `<Img />` and `<IFrame />` components\\n\\n**[See docs](/docs/use-img-and-iframe)**\\n\\nThe purpose of these new components is to help with something that is easy to overlook in Remotion: Images or Iframes are being rendered, but Remotion does not wait until the loading of these network resources are complete. The result: Flicker in the end result! The correct thing is [to wait using the `delayRender` API](/docs/data-fetching#telling-remotion-to-wait-until-the-data-is-loaded), but this is not very obvious. Now Remotion comes with built-in components that will wait until assets are loaded.\\n\\n### Bonus: ESLint rule\\n\\n![ESLint rule \'warn-native-media-tag\'](https://user-images.githubusercontent.com/1629785/107443059-62829e00-6b38-11eb-9d0e-fb12b68fa2a9.png)\\n\\nTo prevent shooting yourself into your foot, Remotion now comes with an ESLint rule that warns if you use the native `<img>`, `<iframe>`, `<video>` or `<audio>` tags. These tags work better when you use the Remotion-wrapped versions instead.\\n\\n## Upgrading is easy\\n\\nSimply type\\n\\n```console\\nnpm run upgrade\\n```\\n\\nin your project and you\'ll get all the newest Remotion packages! Maybe you also noticed that there is a banner in the editor that notifies you when an upgrade is available."},{"id":"introducing-remotion","metadata":{"permalink":"/blog/introducing-remotion","editUrl":"https://github.com/remotion-dev/remotion/edit/main/packages/docs/blog/blog/2021-02-08-introducing-remotion.md","source":"@site/blog/2021-02-08-introducing-remotion.md","title":"Introducing Remotion","description":"I\'ve been using After Effects for many years, but it\'s always been a dream of mine to code my videos instead. In the React ecosystem, I am used to being able to take advantage of powerful composition, reusability, to be able to customize the experience for every user. To use scripts, linters and external dependencies to make my life easier as a coder.","date":"2021-02-08T00:00:00.000Z","formattedDate":"February 8, 2021","tags":[],"readingTime":1.28,"truncated":false,"authors":[{"name":"Jonny Burger","title":"Indie Hacker","url":"https://github.com/JonnyBurger","imageURL":"https://avatars2.githubusercontent.com/u/1629785?s=460&u=12eb94da6070d00fc924761ce06e3a428d01b7e9&v=4"}],"prevItem":{"title":"Remotion 1.1","permalink":"/blog/1-1"}},"content":"I\'ve been using After Effects for many years, but it\'s always been a dream of mine to code my videos instead. In the React ecosystem, I am used to being able to take advantage of powerful composition, reusability, to be able to customize the experience for every user. To use scripts, linters and external dependencies to make my life easier as a coder.\\n\\nSo as a proof of concept I tried to make a trailer for my AnySticker app[^1] in React, and to render each frame using Puppeteer and stitch them together using FFMPEG.\\n\\nThe final result was a video that I thought was the best one I created yet. And I realized there was something to the idea.\\n\\nThis is my attempt to create a tool for the community that allows you to write videos in React. Obviously this is a huge undertaking, so this is not a product with hundreds of different features built in. Rather, following the React philosophy, this is an attempt to create a minimal fundament for rendering videos in React. Basically, you get a blank canvas, and you create your motion graphics using existing web technologies built into the browser and your favorite external libraries. Remotion is so minimal in fact, it consists of only 5-6 APIs that you need to learn to get started.\\n\\nTo get started is super easy. Assuming you already have [Yarn](https://yarnpkg.com), run:\\n\\n```bash\\nyarn create video\\n```\\n\\nand then read the [documentation](/docs). [Let me know on Twitter](https://twitter.com/JNYBGR) what you think!\\n\\n[^1]: [AnySticker beta trailer ](https://twitter.com/JNYBGR/status/1319292595420291074)"}]}')}}]);